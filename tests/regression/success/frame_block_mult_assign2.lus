node test(x: int) returns (y1: int; y2: int^3; y3: int; y4: int^3; y5: int; y6: int^3;
                          p1, p2, p3, p4, p5, p6: bool);
let 
(* Commented out until circular dependency issue is fixed *)
  check true;
(*
  p1 = (y1 = 5);
  p2 = (y2[2] = 4);
  p3 = (y3 = 4);
  p4 = (y4[2] = 2);
  p5 = (y5 = 4);
  p6 = (y6[2] = 2);

  check p1;
  check p2;
  check p3;
  check p4;
  check p5;
  check p6;

  
  def ( y1 = 4; y2[i] = if i = 0 then 0 else y2[i-1] + 1; )
    if (oscillate())
    then
      y1 = 5;
      y2[i] = if i = 0 then 0 else y2[i-1] + 2;
    fi
  fed
  
  def ( (y3, y4[i]) = (4, if i = 0 then 0 else y4[i-1] + 1); )
    y3 = 4;
    y4[i] = if i = 0 then 0 else y4[i-1] + 1;
  fed

  def ( (y5, y6[i]) = (4, if i = 0 then 0 else y6[i-1] + 1); )
    if (oscillate())
    then
      y5 = 4;
      y6[i] = if i = 0 then 0 else y6[i-1] + 1;
    fi
  fed
  *)
tel

node oscillate() returns (y: bool);
let
   y = true -> not pre y;
tel;

node array() returns (y: int^3);
let
   y = [0, 1, 2];
tel;